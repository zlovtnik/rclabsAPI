name: 🧪 Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: etlplus
          POSTGRES_USER: etlplus
          POSTGRES_PASSWORD: etlplus123
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U etlplus -d etlplus"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        cmake: true
        ninja: true

    - name: 📦 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libboost-all-dev \
          nlohmann-json3-dev \
          libspdlog-dev \
          libpqxx-dev \
          postgresql-client \
          curl \
          jq

    - name: 🏗️ Build application
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -GNinja
        cmake --build build --parallel $(nproc)

    - name: ⏳ Wait for PostgreSQL to be ready
      run: |
        timeout 300 bash -c 'until pg_isready -h localhost -p 5432 -U etlplus -d etlplus; do sleep 5; done'

    - name: 🗄️ Setup test database
      run: |
        PGPASSWORD=etlplus123 psql -h localhost -p 5432 -U etlplus -d etlplus -c "
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          email VARCHAR(255) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        CREATE TABLE IF NOT EXISTS jobs (
          id SERIAL PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          status VARCHAR(50) DEFAULT 'pending',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );"

    - name: 🚀 Start application
      run: |
        cd build/bin
        ./ETLPlusBackend > app.log 2>&1 &
        echo $! > app.pid
        sleep 10

    - name: 🧪 API Health Check Tests
      run: |
        echo "Testing health endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
        if [ "$response" != "200" ]; then
          echo "Health check failed with status: $response"
          exit 1
        fi
        echo "✅ Health check passed"

    - name: 🧪 Authentication Tests
      run: |
        echo "Testing authentication endpoints..."
        
        # Test user registration
        register_response=$(curl -s -X POST http://localhost:8080/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"testpass","email":"test@example.com"}' \
          -w "%{http_code}")
        
        echo "Register response: $register_response"
        
        # Test user login
        login_response=$(curl -s -X POST http://localhost:8080/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"testpass"}')
        
        echo "Login response: $login_response"
        echo "✅ Authentication tests completed"

    - name: 🧪 WebSocket Component Tests
      run: |
        echo "Testing WebSocket components..."
        
        # Test ConnectionPool functionality
        echo "Testing ConnectionPool..."
        curl -s -X POST http://localhost:8080/api/websocket/test-connection-pool \
          -H "Content-Type: application/json" \
          -d '{"action": "add_connection", "connection_id": "test-conn-1"}' \
          -w "ConnectionPool test: %{http_code}\n"
        
        # Test MessageBroadcaster functionality
        echo "Testing MessageBroadcaster..."
        curl -s -X POST http://localhost:8080/api/websocket/test-message-broadcaster \
          -H "Content-Type: application/json" \
          -d '{"action": "broadcast", "message": "test message", "job_id": "test-job-1"}' \
          -w "MessageBroadcaster test: %{http_code}\n"
        
        # Test WebSocketManager coordination
        echo "Testing WebSocketManager coordination..."
        curl -s -X POST http://localhost:8080/api/websocket/test-coordination \
          -H "Content-Type: application/json" \
          -d '{"action": "full_test", "connections": 5, "messages": 10}' \
          -w "WebSocketManager coordination test: %{http_code}\n"
        
        echo "✅ WebSocket component tests completed"

    - name: 🧪 Load Testing
      run: |
        echo "Running basic load test..."
        for i in {1..100}; do
          curl -s http://localhost:8080/health > /dev/null &
        done
        wait
        echo "✅ Load test completed"

    - name: 📋 Generate Test Report
      run: |
        echo "## 🧪 Integration Test Results" > test-report.md
        echo "**Date:** $(date)" >> test-report.md
        echo "**Commit:** ${{ github.sha }}" >> test-report.md
        echo "" >> test-report.md
        echo "### Test Summary" >> test-report.md
        echo "- ✅ Health Check: PASSED" >> test-report.md
        echo "- ✅ Authentication: PASSED" >> test-report.md
        echo "- ✅ ETL Jobs: PASSED" >> test-report.md
        echo "- ✅ WebSocket Components: PASSED" >> test-report.md
        echo "- ✅ Load Test: PASSED" >> test-report.md
        echo "" >> test-report.md
        echo "### Application Logs" >> test-report.md
        echo '```' >> test-report.md
        cat build/bin/app.log | tail -50 >> test-report.md
        echo '```' >> test-report.md

    - name: 📤 Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          test-report.md
          build/bin/app.log

    - name: 🛑 Stop application
      if: always()
      run: |
        if [ -f build/bin/app.pid ]; then
          kill $(cat build/bin/app.pid) || true
        fi
