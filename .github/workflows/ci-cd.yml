name: 🚀 ETL Plus CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  BUILD_TYPE: Release
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Code Quality & Security Analysis
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: 🔧 Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        vcvarsall: false
        cmake: true
        ninja: true
        ccache: true
        cppcheck: true
        clang-format: true

    - name: 🎨 Check Code Formatting
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

    - name: 🔍 Static Analysis with Cppcheck
      run: |
        cppcheck --enable=all --inconclusive --std=c++20 \
          --suppress=missingIncludeSystem --xml --xml-version=2 \
          -I include src/ 2> cppcheck-report.xml

    - name: 📊 SonarCloud Analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: 🛡️ Security Scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: 🏗️ Autobuild for CodeQL
      uses: github/codeql-action/autobuild@v3

    - name: 🛡️ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 🏗️ Multi-Platform Build Matrix
  build:
    name: 🏗️ Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkg_root: /usr/local/share/vcpkg
          - os: macos-latest
            triplet: x64-osx
            vcpkg_root: /usr/local/share/vcpkg

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 💾 Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/vcpkg
          build/vcpkg_installed
        key: ${{ matrix.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          ${{ matrix.os }}-vcpkg-

    - name: 🔧 Setup C++ Environment
      uses: aminya/setup-cpp@v1
      with:
        compiler: gcc
        vcvarsall: false
        cmake: true
        ninja: true
        ccache: true

    - name: 📦 Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libboost-all-dev \
          nlohmann-json3-dev \
          libspdlog-dev \
          libpqxx-dev \
          libssl-dev \
          pkg-config

    - name: 📦 Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install \
          boost \
          nlohmann-json \
          spdlog \
          libpqxx \
          openssl \
          pkg-config

    - name: 🏗️ Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DENABLE_TESTING=ON \
          -DENABLE_CODE_COVERAGE=ON

    - name: 🔨 Build ETL Plus
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --parallel $(nproc || sysctl -n hw.ncpu)

    - name: 🧪 Run Unit Tests
      working-directory: build
      run: |
        ctest --output-on-failure --parallel $(nproc || sysctl -n hw.ncpu)

    - name: 🧪 Run WebSocket Component Tests
      working-directory: build
      run: |
        echo "Running WebSocket component specific tests..."
        # Run tests for ConnectionPool
        ctest -R "ConnectionPool" --output-on-failure
        # Run tests for MessageBroadcaster
        ctest -R "MessageBroadcaster" --output-on-failure
        # Run tests for WebSocketManager
        ctest -R "WebSocketManager" --output-on-failure

    - name: 📊 Generate Code Coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y lcov
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: 📈 Upload Coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: 📦 Package Artifacts
      run: |
        mkdir -p artifacts
        cp build/bin/ETLPlusBackend artifacts/
        cp -r config artifacts/
        # Include new component libraries if built as shared libraries
        cp build/lib/libetl_common.a artifacts/ 2>/dev/null || echo "Static library not found, skipping..."
        tar -czf etlplus-refactored-${{ matrix.os }}-${{ github.sha }}.tar.gz artifacts/

    - name: 🚀 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: etlplus-refactored-${{ matrix.os }}-build
        path: etlplus-refactored-${{ matrix.os }}-${{ github.sha }}.tar.gz
        retention-days: 30

  # 🐳 Docker Build & Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deployment
  deploy:
    name: 🚀 Deploy to ${{ inputs.deploy_environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.deploy_environment || 'staging' }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔐 Configure Kubernetes credentials
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: 🚀 Deploy to Kubernetes
      run: |
        envsubst < k8s/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/etlplus-backend
      env:
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ inputs.deploy_environment || 'staging' }}

    - name: 🔍 Health Check
      run: |
        kubectl wait --for=condition=ready pod -l app=etlplus-backend --timeout=300s
        
    - name: 📊 Deployment Status
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Application URL: https://etlplus-${{ inputs.deploy_environment || 'staging' }}.yourdomain.com"

  # 🏷️ Release
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: 📝 Generate Release Notes
      id: release-notes
      run: |
        echo "## 🚀 What's New" >> release-notes.md
        echo "" >> release-notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📦 Assets" >> release-notes.md
        echo "- **ETLPlusBackend**: Main application binary" >> release-notes.md
        echo "- **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}\`" >> release-notes.md

    - name: 🏷️ Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: release-artifacts/**/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # 🔔 Notifications
  notify:
    name: 🔔 Notifications
    runs-on: ubuntu-latest
    needs: [build, docker, deploy]
    if: always()
    steps:
    - name: 💬 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#etlplus-ci'
        username: 'ETL Plus CI/CD'
        icon_emoji: ':rocket:'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📧 Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "❌ ETL Plus CI/CD Pipeline Failed"
        body: |
          The ETL Plus CI/CD pipeline has failed for commit ${{ github.sha }}.
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: ${{ secrets.EMAIL_TO }}
        from: ETL Plus CI/CD
